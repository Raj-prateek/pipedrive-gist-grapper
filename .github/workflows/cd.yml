name: Deploy to Amazon ECS

on:
  workflow_run:
    workflows: ["CI build"]
    branches: [main]
    types:
      - completed

env:
  AWS_REGION: ap-south-1
  ECR_REPOSITORY: pipedrive-gist-challenge
  ECS_SERVICE: pipedrive-gist-challenge-service
  ECS_CLUSTER: pipedrive-gist-grapper
  ECS_TASK_DEFINITION: .aws/task-definition.json
  CONTAINER_NAME: pipedrive-gist-grapper

jobs:
  deploy:
    name: Continuous Delivery
    runs-on: ubuntu-latest
    environment: production

    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@13d241b293754004c80624b5567555c4a39ffbe3
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@aaf69d68aa3fb14c1d5a6be9ac61fe15b48453a2

      - name: Build, tag, and push image to Amazon ECR
        id: build-image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          IMAGE_TAG: ${{ github.sha }}
          AMQ_HOST: ${{ secrets.AMQ_HOST }}
          RABBITMQ_VHOST: ${{ secrets.RABBITMQ_VHOST }}
          AMQP_USERNAME: ${{ secrets.AMQP_USERNAME }}
          AMQP_PASSWORD: ${{ secrets.AMQP_PASSWORD }}
          MONGO_PRODUCTION: ${{ secrets.MONGO_PRODUCTION }}
          GIT_ACCESS_TOKEN: ${{ secrets.GIT_ACCESS_TOKEN }}
          PIPEDRIVE_ACCESSTOKEN: ${{ secrets.PIPEDRIVE_ACCESSTOKEN }}
        run: |
          docker build \
            -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG \
            --build-arg RABBITMQ_HOST="$AMQ_HOST" \
            --build-arg RABBITMQ_VHOST="$RABBITMQ_VHOST" \
            --build-arg AMQP_USERNAME="$AMQP_USERNAME" \
            --build-arg AMQP_PASSWORD="$AMQP_PASSWORD" \
            --build-arg MONGO_PRODUCTION="$MONGO_PRODUCTION" \
            --build-arg GITHUB_TOKEN="$GIT_ACCESS_TOKEN" \
            --build-arg PIPEDRIVE_TOKEN="$PIPEDRIVE_ACCESSTOKEN" \
            --no-cache .
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
          echo "::set-output name=image::$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG"

      - name: Fill in the new image ID in the Amazon ECS task definition
        id: task-def
        uses: aws-actions/amazon-ecs-render-task-definition@97587c9d45a4930bf0e3da8dd2feb2a463cf4a3a
        with:
          task-definition: ${{ env.ECS_TASK_DEFINITION }}
          container-name: ${{ env.CONTAINER_NAME }}
          image: ${{ steps.build-image.outputs.image }}

      - name: Deploy Amazon ECS task definition
        uses: aws-actions/amazon-ecs-deploy-task-definition@de0132cf8cdedb79975c6d42b77eb7ea193cf28e
        with:
          task-definition: ${{ steps.task-def.outputs.task-definition }}
          service: ${{ env.ECS_SERVICE }}
          cluster: ${{ env.ECS_CLUSTER }}
          wait-for-service-stability: true
